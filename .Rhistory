setwd("E:/stat4402/a5")
load(file = "assignment5_data.RData")
install.packages("devtools")
devtools::install_github("andrewthomasjones/EMMIXcontrasts")
shiny::runApp('Documents/data-viz/srv/shinyapps')
runApp('Documents/data-viz/srv/shinyapps')
(5/28)/(4/5)
1/7
(5/28)/(5/4)
39.2/98
458/6
25.6/64
4/3 - 9/12
7/12
12*88
8*33
setwd("~/Documents/cadreon")
library(readxl)
#Import the sales data into R:
salesData = read_excel("toy_sales_data.xlsx", sheet=1)
#Import the sales data into R:
salesData = read_excel("toy_sales_data.xlsx", sheet=1)
type(salesData$month)
typeof(salesData$month)
attach(salesData)
#Change to tidy-data:
tidySales = gather(salesData,  "Type", "Amount", 2:4)
setwd("~/Documents/cadreon/")
install.packages("readxl")
install.packages("ggplot2")
install.packages("tidyr")
library(readxl)
library(ggplot2)
library(tidyr)
install.packages("readxl")
install.packages("readxl")
library(readxl)
library(ggplot2)
library(tidyr)
#Import the sales data into R:
salesData = read_excel("toy_sales_data.xlsx", sheet=1)
attach(salesData)
#Change to tidy-data:
tidySales = gather(salesData,  "Type", "Amount", 2:4)
#Create a plot of sales, TV and digital investment
ggplot(data= tidySales, aes(x=month, y=Amount/10^6, colour=Type))+
geom_point()+
geom_line()+
ggtitle("Sales, TV investment and Digital investment vs. Time")+
xlab("Time")+
ylab("Amount ($ million) ")+
scale_fill_discrete(name = "")
#Change to tidy-data:
tidySales = gather(salesData,  "Variable", "Amount", 2:4)
#Create a plot of sales, TV and digital investment
ggplot(data= tidySales, aes(x=month, y=Amount/10^6, colour=Type))+
geom_point()+
geom_line()+
ggtitle("Sales, TV investment and Digital investment vs. Time")+
xlab("Time")+
ylab("Amount ($ million) ")+
scale_fill_discrete(name = "")
#Create a plot of sales, TV and digital investment
ggplot(data= tidySales, aes(x=month, y=Amount/10^6, colour=Variable))+
geom_point()+
geom_line()+
ggtitle("Sales, TV investment and Digital investment vs. Time")+
xlab("Time")+
ylab("Amount ($ million) ")+
scale_fill_discrete(name = "")
#Import the sales data into R:
salesData = read_excel("toy_sales_data.xlsx", sheet=1)
attach(salesData)
#Change to tidy-data:
tidySales = gather(salesData,  "Type", "Amount", 2:4)
#Create a plot of sales, TV and digital investment
ggplot(data= tidySales, aes(x=month, y=Amount/10^6, colour=Type))+
geom_point()+
geom_line()+
ggtitle("Sales, TV investment and Digital investment vs. Time")+
xlab("Time")+
ylab("Amount ($ million) ")
cor(salesData[,2:4])
month
is.date(salesData)
#fitting a linear regression model to the data
salesRegression = lm(sales ~ tv_spend + digital_spend + trend + xmas +month)
View(salesRegression)
month
lm(sales ~ tv_spend + digital_spend + trend + xmas +month)
lm(sales ~ tv_spend + digital_spend + trend + xmas +month+month)
lm(sales ~ tv_spend + digital_spend + trend + xmas +month+month+xmas)
as.integer(months())
as.integer(months)
lm(sales ~month)
lm(sales ~ trend)
3*month
as.POSIXct(month)
is.POSIXct(month)
as.POSIXct(1)
-5*month[1]
month[1]*30
month[1]+30
month[1]
lm(sales ~ trend)
lm(sales ~month)
1.340e-01*montj
1.340e-01*month
as.integer(trend)
is.integer(trend)
test = 3*trend
lm(sales ~ trend+test)
as.numeric(month)
month
1451606400-1454284800
1454284800-1456790400
1459468800-1462060800
1462060800-1464739200
#fitting a linear regression model to the data: use all data points
salesRegression = lm(sales ~ tv_spend + digital_spend + trend + xmas)
summary(salesRegression)
read_excel("toy_sales_data.xlsx", sheet=2)
# Q7 : plug in the values to the regression
plannedData = read_excel("toy_sales_data.xlsx", sheet=1)
predict.lm(salesRegression, plannedData)
# Q7 : plug in the values to the regression
plannedData = read_excel("toy_sales_data.xlsx", sheet=2)
predict.lm(salesRegression, plannedData)
plannedData
View(plannedData)
View(salesData)
# Q7 : plug in the values to the regression
plannedData = read_excel("toy_sales_data.xlsx", sheet=2)
plannedData$trend = c(25,26,27)
plannedData$xmas = c(0,0,0)
predict.lm(salesRegression, plannedData)
#fitting a linear regression model to the data: use all data points
salesRegression = lm(sales ~ tv_spend + digital_spend + trend + xmas)
summary(salesRegression)
# Q7 : plug in the values to the regression
plannedData = read_excel("toy_sales_data.xlsx", sheet=2)
plannedData$trend = c(25,26,27)  #continue the trend variable for the following months
plannedData$xmas = c(0,0,0)      #none of the prediction dates are xmas
predict.lm(salesRegression, plannedData)   #predicted sales
#fitting a linear regression model to the data: use all data points
salesRegression = lm(sales ~ tv_spend + digital_spend + trend + xmas+month)
summary(salesRegression)
# Q7 : plug in the values to the regression
plannedData = read_excel("toy_sales_data.xlsx", sheet=2)
plannedData$trend = c(25,26,27)  #continue the trend variable for the following months
plannedData$xmas = c(0,0,0)      #none of the prediction dates are xmas
predict.lm(salesRegression, plannedData)   #predicted sales
#fitting a linear regression model to the data: use all data points
salesRegression = lm(sales ~ tv_spend + digital_spend + trend + xmas)
summary(salesRegression)
cor(salesData[,2:4])
rmarkdown::render("rtest.R")
install.packages("readxl")
rmarkdown::render("rtest.R")
rmarkdown::render("rtest.R", "pdf")
rmarkdown::render("rtest.R", "pdf-document")
ROI = 2.026-1/1
summary(salesRegression)
sales/tv_spend
sum(sales)/sum(tv_spend)
sum(sales)-sum(tv_spend)/sum(tv_spend)
(sum(sales)-sum(tv_spend))/sum(tv_spend)
lm(sales ~ tv_spend)
summary(salesRegression)
summary(lm(sales ~ tv_spend))
